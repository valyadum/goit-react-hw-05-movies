{"version":3,"file":"static/js/134.d4cfcac5.chunk.js","mappings":";oIAsCA,IAAMA,EAAM,CAAEC,QApCb,WACC,OACIC,MAAM,6FAEJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,MAAM,GAExC,EA8BuBC,YA7BvB,SAAqBC,GAChB,OACIL,MAAM,sCAADM,OACqCD,EAAO,8CACpDJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,MAAM,GACtC,EAwBoCI,gBArBpC,SAAyBF,GACrB,OACIL,MAAM,sCAADM,OAAuCD,EAAO,sDAC9CJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,MAAM,GAG7C,EAeqDK,WAdrD,SAAoBH,GAChB,OACIL,MAAM,sCAADM,OAAuCD,EAAO,sDAC9CJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,MAAM,GAG7C,EAQiEM,iBAPjE,SAA0BC,GACtB,OACIV,MAAM,mDAADM,OAAoDI,EAAK,kEACzDT,MAAK,SAAAC,GAAQ,OAAIA,EAASC,MAAM,GAG7C,GAEA,iICjCe,SAASQ,IACtB,IAAAC,GAA4BC,EAAAA,EAAAA,IAAgB,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAxCI,EAAMF,EAAA,GAAEG,EAASH,EAAA,GACxBI,GAA0BC,EAAAA,EAAAA,UAAS,MAAKC,GAAAL,EAAAA,EAAAA,GAAAG,EAAA,GAAjCR,EAAKU,EAAA,GAAEC,EAAQD,EAAA,GACtBE,GAA0BH,EAAAA,EAAAA,UAAS,IAAGI,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAA/BE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAChBG,GAAWC,EAAAA,EAAAA,MACXC,EAASZ,EAAOa,IAAI,UA4B1B,OArBAC,EAAAA,EAAAA,YAAU,WACHpB,GAGLZ,EAAAA,EAAAA,iBAAqBY,GAClBT,MAAK,SAAA8B,GACJN,EAASM,EAAKC,QAChB,IACCC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,EAAI,GACpC,GAAG,CAACxB,IACJyB,QAAQE,IAAIb,IAYVc,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,MAAA,QAAMG,OAAO,GAAGC,QA5BpB,SAAuBC,GACrBA,EAAMC,iBACNvB,EAASO,EACX,EAyB2CY,SAAA,EACrCK,EAAAA,EAAAA,KAAA,SAAOC,KAAK,OAAOC,MAAa,OAANnB,QAAM,IAANA,EAAAA,EAAU,GAAIoB,SAb9C,SAAsBL,GACpB,GAA2B,KAAvBA,EAAMM,OAAOF,MACf,OAAO9B,EAAU,CAAC,GAEpBA,EAAU,CAAEW,OAAQe,EAAMM,OAAOF,OACnC,KASMF,EAAAA,EAAAA,KAAA,UAAQC,KAAK,SAAQN,SAAC,eAGxBK,EAAAA,EAAAA,KAAA,MAAAL,SACGhB,GACCA,EAAM0B,KAAI,SAAAC,GAAoB,IAAjBC,EAAKD,EAALC,MAAOC,EAAEF,EAAFE,GAClB,OACER,EAAAA,EAAAA,KAAA,MAAAL,UACEK,EAAAA,EAAAA,KAACS,EAAAA,GAAI,CAACC,GAAE,WAAAjD,OAAa+C,GAAMG,MAAO,CAAEC,KAAM/B,GAAWc,SAClDY,KAFIC,EAMb,QAOV","sources":["filmAPI.js","pages/Movies.jsx"],"sourcesContent":["\n\n function filmAPI(){\n  return (\n      fetch(\n          `https://api.themoviedb.org/3/trending/movie/week?api_key=8817625a99e963f36ab0e1c9bab55397`\n      ).then(response => response.json())\n  )\n}\nfunction getFilmById(movieId) {\n     return (\n         fetch(\n             `https://api.themoviedb.org/3/movie/${movieId}?api_key=8817625a99e963f36ab0e1c9bab55397`\n    ).then(response => response.json()))\n}\n\n// /movies/get-movie-details \nfunction getMovieCredits(movieId) {\n    return (\n        fetch(`https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=8817625a99e963f36ab0e1c9bab55397`)\n            .then(response => response.json())\n    )\n    \n}\nfunction getReviews(movieId) {\n    return (\n        fetch(`https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=8817625a99e963f36ab0e1c9bab55397`)\n            .then(response => response.json())\n    ) \n    \n}\nfunction getMovieToSearch(query) {\n    return (\n        fetch(`https://api.themoviedb.org/3/search/movie?query=${query}&include_adult=false&api_key=8817625a99e963f36ab0e1c9bab55397`)\n            .then(response => response.json())\n    )\n\n}\nconst API = { filmAPI, getFilmById, getMovieCredits, getReviews, getMovieToSearch }\nexport default API\n","import API from 'filmAPI';\nimport React from 'react';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\n\nexport default function Movies() {\n  const [search, setSearch] = useSearchParams('');\n  const [query, setQuery] = useState(null);\n  const [films, setFilms] = useState([]);\n  const location = useLocation();\n  const query1 = search.get('query1');\n\n  function onSearchMovie(event) {\n    event.preventDefault();\n    setQuery(query1);\n  }\n\n  useEffect(() => {\n    if (!query) {\n      return;\n    }\n    API.getMovieToSearch(query)\n      .then(data => {\n        setFilms(data.results);\n      })\n      .catch(err => console.error(err));\n  }, [query]);\n  console.log(films);\n  function updateSearch(event) {\n    if (event.target.value === '') {\n      return setSearch({});\n    }\n    setSearch({ query1: event.target.value });\n  }\n  // if (query.trim() === '') {\n  //   return alert('Please, enter the name of the movie!');\n  // }\n\n  return (\n    <>\n      <form action=\"\" onClick={onSearchMovie}>\n        <input type=\"text\" value={query1 ?? ''} onChange={updateSearch} />\n        <button type=\"submit\">Search</button>\n      </form>\n\n      <ul>\n        {films &&\n          films.map(({ title, id }) => {\n            return (\n              <li key={id}>\n                <Link to={`/movies/${id}`} state={{ from: location }}>\n                  {title}\n                </Link>\n              </li>\n            );\n          })}\n      </ul>\n      {/* //   (\n      //   <p>The movie you are looking for was not found</p>\n      // ) */}\n    </>\n  );\n}\n//! перевірки на пустуй пошуковик, перевірку чи прийшли данні,\n//TODO: стандартна картинка коли нічого не підгрузилось,\n//TODO:  якщо прийшов пустий масив то виводимо альорт\n//TODO: якщо  прийшла помилка запиту виводимо альорт\n//TODO: коли ввели пробіли в пошуковик\n//TODO:  коли нічого не знайшло по запиту\n"],"names":["API","filmAPI","fetch","then","response","json","getFilmById","movieId","concat","getMovieCredits","getReviews","getMovieToSearch","query","Movies","_useSearchParams","useSearchParams","_useSearchParams2","_slicedToArray","search","setSearch","_useState","useState","_useState2","setQuery","_useState3","_useState4","films","setFilms","location","useLocation","query1","get","useEffect","data","results","catch","err","console","error","log","_jsxs","_Fragment","children","action","onClick","event","preventDefault","_jsx","type","value","onChange","target","map","_ref","title","id","Link","to","state","from"],"sourceRoot":""}